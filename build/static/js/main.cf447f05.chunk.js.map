{"version":3,"sources":["triviaTimeLogo.png","Header.js","playerInfo/NumberOfPlayers.js","playerInfo/NamesAndAvatars.js","Category.js","playerInfo/PlayerInformation.js","Timer.js","ScoreBoard.js","Playgame.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","HowManyPlayers","handleChange","event","props","numberOfPlayers","target","value","htmlFor","onChange","this","Component","NameAndAvatars","getAvatars","updateState","e","preventDefault","players","createPlayers","setState","isShowingAvatars","avatars","shuffleArray","i","push","id","toString","img","name","score","valid","array","size","length","temporaryValue","randomIndex","currentIndex","Math","floor","random","slice","index","state","handleFormSubmit","formIsValid","validateForm","playerInformation","alert","generatePlayers","map","player","key","document","querySelector","scrollIntoView","behavior","onSubmit","type","onClick","Category","j","temp","questionsSubmit","res","playerInfo","questions","newInfo","count","arr","x","allAnswers","incorrect_answers","correct_answer","category","selectedCategory","numberOfQuestions","axios","url","params","amount","difficulty","then","response","data","results","parser","DOMParser","question","forEach","incorrectAnswer","newString","parseFromString","body","textContent","oldString","generateQuestions","disabled","selected","getPlayerInformation","PlayerInformation","getNumberOfPlayers","goToCategory","goToPlay","NumberOfPlayers","NamesAndAvatars","getCategory","Timer","startQuiz","start","myInterval","setInterval","timer","stopTime","clearInterval","ScoreBoard","localPlayers","sort","a","b","handleReset","to","Playgame","componentDidMount","handleNextPlayer","cleanTheScreen","currentPlayer","answeredQuestionTracker","div","classList","toggle","onAnswerClicked","answer","questionNumber","parentDiv","parentNode","timerFunction","showQuestions","indexA","reset","App","updatedPlayersInformation","basename","process","exact","path","render","pathname","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"kGAAAA,EAAOC,QAAU,IAA0B,4C,sOCgB5BC,EAbA,WACX,OACI,gCACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,mBACX,yBAAKC,IAAKC,IAAMF,UAAU,OAAOG,IAAI,qBACrC,4BAAI,oDAAJ,IAAoC,2DCgBzCC,E,4MAtBXC,aAAe,SAACC,GACZ,EAAKC,MAAMC,gBAAgBF,EAAMG,OAAOC,Q,uDAGxC,OACE,8BACE,8BACE,8BAAUV,UAAU,cAClB,2BAAOA,UAAU,cAAcW,QAAQ,cAAvC,0BACA,4BAAQC,SAAUC,KAAKR,cACrB,4BAAQK,MAAM,IAAd,sBACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,a,GAfWI,aCyIdC,E,kDAxIX,aAAe,IAAD,8BACV,gBAaJC,WAAa,WACT,MAAO,CACP,6EACA,4EACA,+EACA,iFAnBU,EAuBdC,YAAc,SAACC,EAAGV,GAEd,GADAU,EAAEC,iBACqB,IAApBX,EAAuB,CACtB,IAAIY,EAAU,EAAKC,cAAcb,GACjC,EAAKc,SAAS,CACVC,kBAAkB,EAClBH,QAASA,MA7BP,EAkCdC,cAAgB,SAACb,GACb,IAAIgB,EAAU,EAAKR,aACfI,EAAU,GACdI,EAAU,EAAKC,aAAaD,GAC5B,IAAK,IAAIE,EAAI,EAAGA,EAAIlB,EAAiBkB,IACjCN,EAAQO,KAAK,CACTC,IAAKF,EAAI,GAAGG,WACZC,IAAKN,EAAQE,GACbK,KAAM,GACNC,MAAO,EACPC,OAAO,IAGf,OAAOb,GA/CG,EAkDdK,aAAe,SAACS,EAAOC,GACnBA,EAAOA,GAAQD,EAAME,OAIrB,IAHA,IACIC,EACAC,EAFAC,EAAeL,EAAME,OAGlB,IAAMG,GACTD,EAAcE,KAAKC,MAAMD,KAAKE,SAAWH,GAEzCF,EAAiBH,EADjBK,GAAgB,GAEhBL,EAAMK,GAAgBL,EAAMI,GAC5BJ,EAAMI,GAAeD,EAEzB,OAAOH,EAAMS,MAAM,EAAER,IA9DX,EAiEd9B,aAAe,SAACa,GACZ,IAAI0B,EAAQ1B,EAAET,OAAOmB,GAAK,EACtBG,EAAOb,EAAET,OAAOC,MACpB,EAAKY,UAAS,SAACuB,GACXA,EAAMzB,QAAQwB,GAAOX,MAASF,GAAwB,IAAhBA,EAAKK,WArErC,EAyEdU,iBAAmB,SAAC5B,GAChBA,EAAEC,iBAEF,IAAI4B,EAAc,EAAKC,aAAa,EAAKH,MAAMzB,SAG/C,GAFA,EAAKb,MAAM0C,kBAAkB,EAAKJ,MAAMzB,QAAS2B,GAE7CA,EACA,IADc,IAAD,WACLrB,GACJ,IAAIkB,EAAQ1B,EAAET,OAAOiB,GAAGE,GAAK,EACzBG,EAAOb,EAAET,OAAOiB,GAAGhB,MACvB,EAAKY,UAAS,SAACuB,GACXA,EAAMzB,QAAQwB,GAAOb,KAAOA,MAJ5BL,EAAE,EAAGA,EAAER,EAAET,OAAO2B,OAAO,EAAGV,IAAM,EAAhCA,QAQRwB,MAAM,4CAxFA,EA4FdF,aAAe,SAAC5B,GACZ,IAAI,IAAIM,EAAE,EAAGA,EAAGN,EAAQgB,OAAQV,IAC5B,IAAIN,EAAQM,GAAGO,MACX,OAAO,EAGf,OAAO,GAlGG,EAqGdkB,gBAAkB,WACd,GAAI,EAAKN,MAAMtB,iBAAkB,CAC7B,IAAMH,EAAU,EAAKyB,MAAMzB,QAC3B,OACI,yBAAKpB,UAAU,wBACVoB,EAAQgC,KAAI,SAACC,GACV,OACI,yBAAKC,IAAKD,EAAOzB,GAAI5B,UAAU,mBAC3B,yBAAKC,IAAKoD,EAAOvB,IAAK3B,IAAI,KAC1B,2BAAOS,SAAU,EAAKP,aAAcuB,GAAIyB,EAAOzB,UAOnE,OAAO,sCAnHX,EAAKiB,MAAQ,CACTzB,QAAS,GACTG,kBAAkB,GAJZ,E,gEASVgC,SACCC,cAAc,kBACdC,eAAe,CAAEC,SAAU,a,+BA8GtB,IAAD,OACL,OACE,yBAAK1D,UAAU,iBACb,0BAAM2D,SAAU9C,KAAKiC,iBAAkB9C,UAAU,yBAC9Ca,KAAKsC,kBACJtC,KAAKgC,MAAMtB,iBAEJ,4BAAQqC,KAAK,UAAb,iBADA,4BAAQA,KAAK,SAASC,QAAS,SAAC3C,GAAD,OAAO,EAAKD,YAAYC,EAAG,EAAKX,MAAMC,mBAArE,+C,GAhIMM,a,yBC4GdgD,E,kDA3GX,aAAe,IAAD,8BACV,gBAkDJrC,aAAe,SAACS,GACZ,IAAK,IAAIR,EAAIQ,EAAME,OAAS,EAAGV,EAAI,EAAGA,IAAK,CACvC,IAAMqC,EAAIvB,KAAKC,MAAMD,KAAKE,UAAYhB,EAAI,IACpCsC,EAAO9B,EAAMR,GACnBQ,EAAMR,GAAKQ,EAAM6B,GACjB7B,EAAM6B,GAAKC,EAEf,OAAO9B,GA1DG,EA4Dd+B,gBAAkB,SAACC,EAAKC,GAIpB,IAHA,IAAMC,EAAYF,EACZG,EAAUF,EAEPzC,EAAI,EAAGA,EAAI0C,EAAUhC,OAAS,EAAGV,IAAK,CAG3C,IAFA,IAAI4C,EAAQ,EACNC,EAAM,GACLD,EAAQ,GAAG,CACd,IAAIE,EAAQ,EAAJ9C,EAAQ4C,EAChBJ,EAAIM,GAAGC,WAAP,sBAAwBP,EAAIM,GAAGE,mBAA/B,CAAkDR,EAAIM,GAAGG,iBACzDT,EAAIM,GAAGC,WAAa,EAAKhD,aAAayC,EAAIM,GAAGC,YAC7CF,EAAI5C,KAAKuC,EAAIM,IACbF,IAEJD,EAAQ3C,GAAG0C,UAAYG,EAG3B,EAAKjD,SAAS,CACVF,QAASiD,KA5Eb,EAAKxB,MAAQ,CACTzB,QAAS,GACTwD,SAAU,IAJJ,E,8DAOI1D,EAAGiD,GAAa,IAAD,OACvBU,EAAmB3D,EAAET,OAAOC,MAC5BoE,EAAwC,EAApBX,EAAW/B,OAErC2C,IAAM,CACFC,IAAK,8BACLC,OAAQ,CACJC,OAAQJ,EACRF,SAAUC,EACVM,WAAY,SACZvB,KAAM,cAEXwB,MAAK,SAAAC,GACJ,IAAMnB,EAAMmB,EAASC,KAAKC,QAGpBC,EAAS,IAAIC,UACnBvB,EAAId,KAAI,SAACsC,GACLA,EAAShB,kBAAkBiB,SAAQ,SAACC,EAAiBhD,GACjD,IACMiD,EADML,EAAOM,gBAAgBF,EAAiB,aAC9BG,KAAKC,YAC3BN,EAAShB,kBAAkB9B,GAASiD,KAExC,IAAMI,EAAYP,EAASf,eAErBkB,EADML,EAAOM,gBAAgBG,EAAW,aACxBF,KAAKC,YAC3BN,EAASf,eAAiBkB,KAE9B3B,EAAId,KAAI,SAACsC,GACL,IAAMO,EAAYP,EAASA,SAErBG,EADML,EAAOM,gBAAgBG,EAAW,aACxBF,KAAKC,YAC3BN,EAASA,SAAWG,KAExB,EAAK5B,gBAAgBC,EAAK,EAAK3D,MAAM4D,iB,0CAKzCZ,SACKC,cAAc,sBACdC,eAAe,CAAEC,SAAU,a,+BAkC1B,IAAD,OACL,OACI,yBAAK1D,UAAU,qBACX,0BAAMA,UAAU,eAAeY,SAAU,SAACM,GACtC,EAAKgF,kBAAkBhF,EAAG,EAAKX,MAAM4D,cAErC,8BAAUnE,UAAU,oBAChB,2BAAOA,UAAU,gBAAgBW,QAAQ,IAAzC,qBACA,gCACI,4BAAQwF,UAAQ,EAACC,UAAQ,EAACpG,UAAU,WAApC,qBACA,4BAAQU,MAAM,KAAd,qBACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,UACA,4BAAQA,MAAM,MAAd,wBAIuB,IAA9BG,KAAKgC,MAAMzB,QAAQgB,OAAe,4BAAQpC,UAAU,eAAe6D,QAAS,SAAC3C,GAAQ,EAAKX,MAAM8F,qBAAqBnF,EAAG,EAAK2B,MAAMzB,WAAjG,+BAAoJ,W,GArGpLN,aCuCRwF,E,kDAjCX,aAAe,IAAD,8BACV,gBAQJC,mBAAqB,SAAC/F,GAClB,EAAKc,SAAS,CACVd,gBAAiBA,KAXX,EAcd6F,qBAAuB,SAACjF,EAAS2B,GAC7B,EAAKzB,SAAS,CACVF,QAASA,EACToF,aAAczD,KAflB,EAAKF,MAAQ,CACTzB,QAAS,GACTZ,gBAAiB,EACjBgG,cAAc,EACdC,UAAU,GANJ,E,qDAsBV,OACI,6BACI,kBAACC,EAAD,CAAiBlG,gBAAiBK,KAAK0F,qBACvC,kBAACI,EAAD,CAAiBnG,gBAAiBK,KAAKgC,MAAMrC,gBAAiByC,kBAAmBpC,KAAKwF,wBACzD,IAA5BxF,KAAKgC,MAAM2D,aACL,kBAAC,EAAD,CAAUrC,WAAYtD,KAAKgC,MAAMzB,QAASiF,qBAAsBxF,KAAKN,MAAMqG,cAC5E,U,GA7BU9F,aCyDjB+F,E,kDA7DX,WAAYtG,GAAQ,IAAD,8BACf,cAAMA,IAgCVuG,UAAY,WACR,EAAKxF,SAAS,CACVyF,OAAO,IAEX,EAAKC,WAAaC,aAAY,WAC1B,EAAK3F,SAAS,CACV4F,MAAO,EAAKrE,MAAMqE,MAAQ,MAE/B,MAvCH,EAAKrE,MAAQ,CACTqE,MAAO,GACPH,OAAO,GAJI,E,gEAQE,IAAD,OACZC,EAAaC,aAAY,WACzB,EAAK3F,SAAS,CACV4F,MAAO,EAAKrE,MAAMqE,MAAQ,MAE/B,KACHrG,KAAKS,SAAS,CACV0F,WAAYA,M,2CAMS,IAArBnG,KAAKgC,MAAMqE,QAEXrG,KAAKS,SAAS,CACV4F,MAAO,GACPH,OAAO,IAEXlG,KAAKN,MAAM4G,WAEXC,cAAcvG,KAAKgC,MAAMmE,e,+BAevB,IAAD,OAUL,OACI,oCACI,2BAAInG,KAAKgC,MAAMkE,MAVf,EAAKlE,MAAMqE,OAAS,GACb,uBAAGlH,UAAU,iBAAiB,EAAK6C,MAAMqE,OACzC,EAAKrE,MAAMqE,OAAS,GACpB,uBAAGlH,UAAU,qBAAqB,EAAK6C,MAAMqE,OAE7C,uBAAGlH,UAAU,qBAAqB,EAAK6C,MAAMqE,OAKnB,mB,GAzD7BpG,aCsCLuG,E,uKAjCP,IAAIC,EAAezG,KAAKN,MAAM0C,kBAG9B,OAFAqE,EAAaC,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAEzF,MAAQwF,EAAExF,SAGpC,6BAAShC,UAAU,gBAEf,yBAAKA,UAAU,cACX,uCACA,yBAAKA,UAAU,aACX,4BACKsH,EAAalE,KAAI,SAACC,EAAQT,GAEvB,IAAMb,EAAOsB,EAAOtB,KACdC,EAAQqB,EAAOrB,MAErB,OACI,wBAAIsB,IAAKV,GACL,yBAAK5C,UAAU,WACX,4BAAK+B,GACL,2BAAIC,UAQ5B,4BAAQhC,UAAU,SAAS6D,QAAShD,KAAKN,MAAMmH,aAAa,kBAAC,IAAD,CAAMC,GAAG,KAAT,mC,GA/BvD7G,aCuHV8G,E,kDAnHX,aAAe,IAAD,8BACV,gBAQJC,kBAAoB,WAChB,EAAKvG,SAAS,CACVF,QAAS,EAAKb,MAAMa,UAExBmC,SACKC,cAAc,eACdC,eAAe,CAAEC,SAAU,YAftB,EAkBdoE,iBAAmB,WACf,EAAKxG,SAAS,CACVyG,gBAAgB,EAChBC,cAAe,EAAKnF,MAAMmF,cAAgB,EAC1CC,wBAAyB,EAAC,GAAO,GAAO,KAK3B,CAHJ1E,SAASC,cAAc,YACvBD,SAASC,cAAc,YACvBD,SAASC,cAAc,aAG3BmC,SAAQ,SAACuC,GACdA,EAAIC,UAAUC,OAAO,iBAEL7E,SAASC,cAAc,gBAC/B2E,UAAUC,OAAO,oBAjCnB,EAoCdC,gBAAkB,SAACnH,EAAGwE,EAAU4C,EAAQC,GACpC,IAAMC,EAAYtH,EAAET,OAAOgI,WAC3B,IAAK,EAAK5F,MAAMoF,wBAAwBM,GAAiB,CACrD,IAAIlF,EAAS,EAAK9C,MAAMa,QAAQ,EAAKyB,MAAMmF,eAC3C,GAAIM,IAAW5C,EAASf,eAAgB,CACpCtB,EAAOrB,QACP,IAAIiG,EAA0B,EAAKpF,MAAMoF,wBACzCA,EAAwBM,IAAkB,EAC1C,EAAKjH,SAAS,CACV2G,wBAAyBA,KAIrCO,EAAUL,UAAUC,OAAO,eAjDjB,EAoDdM,cAAgB,WACQnF,SAASC,cAAc,gBAC/B2E,UAAUC,OAAO,oBAtDnB,EAyDdO,cAAgB,WACZ,GAAK,EAAKpI,MAAMa,SAAY,EAAKb,MAAMa,QAAQ,GAAGgD,UAE3C,IAAI,EAAKvB,MAAMkF,eAIlB,OAHA,EAAKzG,SAAS,CACVyG,gBAAgB,IAEb,qCAEP,IAAM1E,EAAS,EAAK9C,MAAMa,QAAQ,EAAKyB,MAAMmF,eAC7C,OAAK3E,EAID,6BAASrD,UAAU,cACf,yBAAKA,UAAU,WACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eACX,uBAAGA,UAAU,cAAb,qBAA6CqD,EAAOtB,MACpD,yBAAK/B,UAAU,mBACX,kBAAC,EAAD,CAAOmH,SAAU,EAAKuB,kBAI9B,yBAAK1I,UAAU,qBAEVqD,EAAOe,UAAUhB,KAAI,SAACsC,EAAU9C,GAC7B,OACI,yBAAK5C,UAAU,YAAYsD,IAAKV,GAC5B,uBAAG5C,UAAU,eAAesD,IAAKV,GAAjC,mBAAqDA,EAAQ,EAA7D,cAAoE8C,EAASA,WAC7E,yBAAK1F,UAAS,gBAAW4C,EAAQ,IAC5B8C,EAASjB,WAAWrB,KAAI,SAACkF,EAAQM,GAC9B,OACI,4BAAQtF,IAAG,UAAKV,GAAL,OAAagG,GAAU/E,QAAS,SAAC3C,GAAD,OAAO,EAAKmH,gBAAgBnH,EAAGwE,EAAU4C,EAAQ1F,KACvF0F,aASrC,yBAAKtI,UAAU,cACX,4BAAQA,UAAU,aAAa6D,QAAS,EAAKiE,kBAA7C,eAjCL,kBAAC,EAAD,CAAY7E,kBAAmB,EAAK1C,MAAMa,QAASsG,YAAa,EAAKnH,MAAMsI,QATtF,OAAO,sCAzDX,EAAKhG,MAAQ,CACTkF,gBAAgB,EAChBC,cAAe,EACfC,wBAAyB,EAAC,GAAO,GAAO,IALlC,E,qDAgHV,OAAOpH,KAAK8H,oB,GAjHG7H,aCyDRgI,E,kDAtDb,aAAe,IAAD,8BACZ,gBAQFC,0BAA4B,SAAC7H,EAAGE,GAC9BF,EAAEC,iBACF,EAAKG,SAAS,CACZF,QAASA,KAZC,EAgBdsG,YAAc,SAACpH,GACbA,EAAMa,iBACN,EAAKG,SAAS,CACZ8C,UAAW,GACXhD,QAAS,GACTqF,UAAU,KArBA,EAyBdG,YAAc,SAAC1F,EAAGE,GAChBF,EAAEC,iBACF,EAAKG,SAAS,CACZF,QAASA,EACTqF,UAAU,KA3BZ,EAAK5D,MAAQ,CACXuB,UAAW,GACXhD,QAAS,GACTqF,UAAU,GALA,E,qDAiCJ,IAAD,OACP,OACE,kBAAC,IAAD,CAAQuC,SAAUC,gBAChB,yBAAKjJ,UAAU,OAEb,kBAAC,EAAD,MACCa,KAAKgC,MAAM4D,SAAW,kBAAC,IAAD,CAAUkB,GAAG,UAAa,KAEjD,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,CACEvC,YAAa/F,KAAK+F,eAGtB,kBAAC,IAAD,CAAOuC,KAAK,QAAQC,OAAQ,SAAC7I,GAAD,OAAW,kBAAC,EAAD,CAAUa,QAAS,EAAKyB,MAAMzB,QAASyH,MAAO,EAAKnB,iBAC1F,kBAAC,IAAD,CAAO0B,OAAQ,kBAAM,kBAAC,IAAD,CAAUzB,GAAI,CAAE0B,SAAU,gB,GAhDvCvI,aCIEwI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFrG,SAASsG,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5E,MAAK,SAAA6E,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cf447f05.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/triviaTimeLogo.44de159f.png\";","import React, { Component } from \"react\";\r\nimport logo from \"./triviaTimeLogo.png\";\r\n\r\nconst Header = () => {\r\n    return(\r\n        <header>\r\n            <div className=\"wrapper\">\r\n                <div className=\"headerContainer\">\r\n                    <img src={logo} className=\"logo\" alt=\"Trivia Time logo\"/>\r\n                    <h1><span>Fight your friends</span> <span>in a battle of wits!</span></h1>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\n\r\nclass HowManyPlayers extends Component {\r\n    handleChange = (event) => {\r\n        this.props.numberOfPlayers(event.target.value);\r\n    }\r\n    render() {\r\n        return (\r\n          <main>\r\n            <form>\r\n              <fieldset className=\"playerForm\">\r\n                <label className=\"playerLabel\" htmlFor=\"playerForm\">How many are playing?!</label>\r\n                <select onChange={this.handleChange}>\r\n                  <option value=\"\">Number of Friends!</option>\r\n                  <option value=\"1\">1</option>\r\n                  <option value=\"2\">2</option>\r\n                  <option value=\"3\">3</option>\r\n                  <option value=\"4\">4</option>\r\n                </select>\r\n              </fieldset>\r\n            </form>\r\n          </main>\r\n        );\r\n    }\r\n}\r\nexport default HowManyPlayers;","import React, { Component } from \"react\";\r\n\r\nclass NameAndAvatars extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            players: [],\r\n            isShowingAvatars: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document\r\n        .querySelector(\".avatarSection\")\r\n        .scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    getAvatars = () => {\r\n        return [\r\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=blue\",\r\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=red\",\r\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=yellow\",\r\n        \"https://avatars.dicebear.com/api/bottts/example.svg?options[colors][]=purple\",\r\n        ];\r\n    };\r\n\r\n    updateState = (e, numberOfPlayers) => {\r\n        e.preventDefault();\r\n        if(numberOfPlayers !== 0) {\r\n            let players = this.createPlayers(numberOfPlayers);\r\n            this.setState({\r\n                isShowingAvatars: true,\r\n                players: players\r\n            });\r\n        }\r\n    };\r\n\r\n    createPlayers = (numberOfPlayers) => {\r\n        let avatars = this.getAvatars();\r\n        let players = [];    \r\n        avatars = this.shuffleArray(avatars);\r\n        for (let i = 0; i < numberOfPlayers; i++) {\r\n            players.push({\r\n                id: (i + 1).toString(),\r\n                img: avatars[i],\r\n                name: \"\",\r\n                score: 0,\r\n                valid: false\r\n            });\r\n        }\r\n        return players;\r\n    }\r\n\r\n    shuffleArray = (array, size) => {\r\n        size = size || array.length;\r\n        let currentIndex = array.length;\r\n        let temporaryValue;\r\n        let randomIndex;\r\n        while (0 !== currentIndex) {\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex -= 1;\r\n            temporaryValue = array[currentIndex];\r\n            array[currentIndex] = array[randomIndex];\r\n            array[randomIndex] = temporaryValue;\r\n        }\r\n        return array.slice(0,size);\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        let index = e.target.id - 1;\r\n        let name = e.target.value;\r\n        this.setState((state) => {\r\n            state.players[index].valid = (name && name.length !== 0);\r\n        });\r\n    }\r\n\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        let formIsValid = this.validateForm(this.state.players);\r\n        this.props.playerInformation(this.state.players, formIsValid);\r\n       \r\n        if (formIsValid) {\r\n            for(let i=0; i<e.target.length-1; i++) {\r\n                let index = e.target[i].id - 1;\r\n                let name = e.target[i].value;\r\n                this.setState((state) => {\r\n                    state.players[index].name = name;\r\n                });         \r\n            }\r\n        } else {\r\n            alert(\"Slow your roll! Enter some names first!\");\r\n        }\r\n    };\r\n\r\n    validateForm = (players) => {\r\n        for(let i=0; i< players.length; i++) {\r\n            if(!players[i].valid) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    generatePlayers = () => {\r\n        if (this.state.isShowingAvatars) {\r\n            const players = this.state.players;\r\n            return ( \r\n                <div className=\"playerSetupContainer\">\r\n                    {players.map((player) => {\r\n                        return (\r\n                            <div key={player.id} className=\"playerInfoInput\">\r\n                                <img src={player.img} alt=\"\" />\r\n                                <input onChange={this.handleChange} id={player.id}/>\r\n                            </div>\r\n                        );\r\n                    })}\r\n                </div>\r\n            );\r\n        } else {\r\n            return <></>;\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n          <div className=\"avatarSection\">\r\n            <form onSubmit={this.handleFormSubmit} className=\"numberOfPlayersSubmit\">\r\n              {this.generatePlayers()}\r\n              {!this.state.isShowingAvatars \r\n                    ? (<button type=\"button\" onClick={(e) => this.updateState(e, this.props.numberOfPlayers)}>Double Check You Have Enough Friends!</button>) \r\n                    : (<button type=\"submit\">Let's Battle!</button>)\r\n              }\r\n            </form>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NameAndAvatars;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass Category extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            players: [],\r\n            category: \"\"\r\n        }\r\n    }\r\n    generateQuestions(e, playerInfo) {\r\n        const selectedCategory = e.target.value\r\n        const numberOfQuestions = playerInfo.length * 3\r\n\r\n        axios({\r\n            url: 'https://opentdb.com/api.php',\r\n            params: {\r\n                amount: numberOfQuestions,\r\n                category: selectedCategory,\r\n                difficulty: \"medium\",\r\n                type: \"multiple\",\r\n            }\r\n        }).then(response => {\r\n            const res = response.data.results;\r\n\r\n            // Useing DOMParser to get a string without crazy characters\r\n            const parser = new DOMParser();\r\n            res.map((question) => {\r\n                question.incorrect_answers.forEach((incorrectAnswer, index) => {\r\n                    const dom = parser.parseFromString(incorrectAnswer, \"text/html\")\r\n                    const newString = dom.body.textContent;\r\n                    question.incorrect_answers[index] = newString;\r\n                });\r\n                const oldString = question.correct_answer\r\n                const dom = parser.parseFromString(oldString, \"text/html\")\r\n                const newString = dom.body.textContent;\r\n                question.correct_answer = newString\r\n            })\r\n            res.map((question) => {\r\n                const oldString = question.question;\r\n                const dom = parser.parseFromString(oldString, \"text/html\")\r\n                const newString = dom.body.textContent;\r\n                question.question = newString\r\n            })\r\n            this.questionsSubmit(res, this.props.playerInfo)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        document\r\n            .querySelector(\".categoryContainer\")\r\n            .scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    shuffleArray = (array) => {\r\n        for (let i = array.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            const temp = array[i];\r\n            array[i] = array[j];\r\n            array[j] = temp;\r\n        }\r\n        return array;\r\n    }\r\n    questionsSubmit = (res, playerInfo) => {\r\n        const questions = res\r\n        const newInfo = playerInfo\r\n\r\n        for (let i = 0; i < questions.length / 3; i++) {\r\n            let count = 0;\r\n            const arr = [];\r\n            while (count < 3) {\r\n                let x = i * 3 + count;\r\n                res[x].allAnswers = [...res[x].incorrect_answers, res[x].correct_answer];\r\n                res[x].allAnswers = this.shuffleArray(res[x].allAnswers);\r\n                arr.push(res[x]);\r\n                count++;\r\n            }\r\n            newInfo[i].questions = arr;\r\n        }\r\n\r\n        this.setState({\r\n            players: newInfo\r\n        })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"categoryContainer\">\r\n                <form className=\"categoryForm\" onChange={(e) => {\r\n                    this.generateQuestions(e, this.props.playerInfo)\r\n                }}>\r\n                    <fieldset className=\"categoryFieldset\">\r\n                        <label className=\"categoryLabel\" htmlFor=\"\">Select Category: </label>\r\n                        <select>\r\n                            <option disabled selected className=\"default\">Select a Category</option>\r\n                            <option value=\"9\">General Knowledge</option>\r\n                            <option value=\"27\">Animals</option>\r\n                            <option value=\"29\">Comics</option>\r\n                            <option value=\"11\">Movies</option>\r\n                            <option value=\"17\">Science And Nature</option>\r\n                        </select>\r\n                    </fieldset>\r\n\r\n                    {this.state.players.length !== 0 ? <button className=\"categoryName\" onClick={(e) => { this.props.getPlayerInformation(e, this.state.players) }}>It's Time For the Showdown!</button> : null}\r\n\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Category;","// This will take info from NumberOf Players & Names & Avatars\r\n\r\nimport React, { Component } from \"react\";\r\nimport NumberOfPlayers from \"./NumberOfPlayers.js\";\r\nimport NamesAndAvatars from \"./NamesAndAvatars.js\";\r\nimport Category from \"../Category.js\";\r\n\r\nclass PlayerInformation extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            players: [],\r\n            numberOfPlayers: 0,\r\n            goToCategory: false,\r\n            goToPlay: false\r\n        }\r\n    }\r\n    getNumberOfPlayers = (numberOfPlayers) => {\r\n        this.setState({\r\n            numberOfPlayers: numberOfPlayers\r\n        })\r\n    }\r\n    getPlayerInformation = (players, formIsValid) => {\r\n        this.setState({\r\n            players: players,\r\n            goToCategory: formIsValid\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <NumberOfPlayers numberOfPlayers={this.getNumberOfPlayers} />\r\n                <NamesAndAvatars numberOfPlayers={this.state.numberOfPlayers} playerInformation={this.getPlayerInformation} />\r\n                {this.state.goToCategory === true \r\n                    ? (<Category playerInfo={this.state.players} getPlayerInformation={this.props.getCategory} />) \r\n                    : null}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default PlayerInformation;","import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            timer: 30,\r\n            start: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        let myInterval = setInterval(() => {\r\n            this.setState({\r\n                timer: this.state.timer - 1\r\n            })\r\n        }, 1000)\r\n        this.setState({\r\n            myInterval: myInterval\r\n        })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n        if (this.state.timer === 0) {\r\n\r\n            this.setState({\r\n                timer: 30,\r\n                start: false\r\n            })\r\n            this.props.stopTime();\r\n\r\n            clearInterval(this.state.myInterval);\r\n        }\r\n    }\r\n\r\n    startQuiz = () => {\r\n        this.setState({\r\n            start: true\r\n        })\r\n        this.myInterval = setInterval(() => {\r\n            this.setState({\r\n                timer: this.state.timer - 1\r\n            })\r\n        }, 1000)\r\n    }\r\n\r\n    render() {\r\n        let timer = () => {\r\n            if (this.state.timer >= 15) {\r\n                return <p className=\"timer timerOk\">{this.state.timer}</p>\r\n            } else if (this.state.timer >= 10) {\r\n                return <p className=\"timer timerWrapUp\">{this.state.timer}</p>\r\n            } else {\r\n                return <p className=\"timer timerDanger\">{this.state.timer}</p>\r\n            }\r\n        }\r\n        return (\r\n            <>\r\n                <p>{this.state.start ? timer() : \"Time's Up!\"}</p>\r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Timer;","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Link, Redirect } from \"react-router-dom\";\r\n\r\nclass ScoreBoard extends Component {\r\n\r\n    render() {\r\n\r\n        let localPlayers = this.props.playerInformation;\r\n        localPlayers.sort((a, b) => b.score - a.score);\r\n\r\n        return (\r\n            <section className=\"finalResults\">\r\n\r\n                <div className=\"scoreBoard\">\r\n                    <h2>Results</h2>\r\n                    <div className=\"scoreList\">\r\n                        <ul>\r\n                            {localPlayers.map((player, index) => {\r\n\r\n                                const name = player.name;\r\n                                const score = player.score;\r\n\r\n                                return (\r\n                                    <li key={index}>\r\n                                        <div className=\"results\">\r\n                                            <h3>{name}</h3>\r\n                                            <p>{score}</p>\r\n                                        </div>\r\n                                    </li>\r\n                                )\r\n                            })}\r\n                        </ul>\r\n                    </div>\r\n\r\n                    <button className=\"replay\" onClick={this.props.handleReset}><Link to=\"/\">Quiz Your Friends Again!</Link></button>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default ScoreBoard;","import React, { Component } from \"react\";\r\nimport Timer from \"./Timer.js\";\r\nimport ScoreBoard from \"./ScoreBoard.js\"\r\n\r\n// Started the current game at current Player at 0 which is the first player.\r\n    // The current question for the player is 0 too.\r\nclass Playgame extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            cleanTheScreen: false,\r\n            currentPlayer: 0,\r\n            answeredQuestionTracker: [false, false, false],\r\n        };\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({\r\n            players: this.props.players\r\n        })\r\n        document\r\n            .querySelector(\".gameScreen\")\r\n            .scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n\r\n    handleNextPlayer = () => {\r\n        this.setState({\r\n            cleanTheScreen: true,\r\n            currentPlayer: this.state.currentPlayer + 1,\r\n            answeredQuestionTracker: [false, false, false],\r\n        })\r\n        const div1 = document.querySelector(\".answer1\")\r\n        const div2 = document.querySelector(\".answer2\")\r\n        const div3 = document.querySelector(\".answer3\")\r\n        const divArray = [div1, div2, div3]\r\n\r\n        divArray.forEach((div) => {\r\n            div.classList.toggle(\"parentHide\")\r\n        })\r\n        const questionDiv = document.querySelector(\".questionDiv\")\r\n        questionDiv.classList.toggle(\"questionDivHide\")\r\n    }\r\n\r\n    onAnswerClicked = (e, question, answer, questionNumber) => {\r\n        const parentDiv = e.target.parentNode\r\n        if (!this.state.answeredQuestionTracker[questionNumber]) {\r\n            let player = this.props.players[this.state.currentPlayer];\r\n            if (answer === question.correct_answer) {\r\n                player.score++;\r\n                let answeredQuestionTracker = this.state.answeredQuestionTracker;\r\n                answeredQuestionTracker[questionNumber] = true;\r\n                this.setState({\r\n                    answeredQuestionTracker: answeredQuestionTracker,\r\n                });\r\n            }\r\n        }\r\n        parentDiv.classList.toggle(\"parentHide\")\r\n    }\r\n\r\n    timerFunction = () => {\r\n        const questionDiv = document.querySelector(\".questionDiv\")\r\n        questionDiv.classList.toggle(\"questionDivHide\")\r\n    }\r\n\r\n    showQuestions = () => {\r\n        if (!this.props.players || !this.props.players[0].questions) {\r\n            return <></>;\r\n        } else if (this.state.cleanTheScreen) {\r\n            this.setState({\r\n                cleanTheScreen: false\r\n            });\r\n            return <></>;\r\n        } else {\r\n            const player = this.props.players[this.state.currentPlayer];\r\n            if (!player) {\r\n                return <ScoreBoard playerInformation={this.props.players} handleReset={this.props.reset} />\r\n            }\r\n            return (\r\n                <section className=\"gameScreen\">\r\n                    <div className=\"wrapper\">\r\n                        <div className=\"questionDiv\">\r\n                            <div className=\"turnDetails\">\r\n                                <p className=\"playerName\">Player Up to Bat: {player.name}</p>\r\n                                <div className=\"timerBackground\">\r\n                                    <Timer stopTime={this.timerFunction} />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"questionContainer\">\r\n\r\n                                {player.questions.map((question, index) => {\r\n                                    return (\r\n                                        <div className=\"questions\" key={index}>\r\n                                            <p className=\"questionText\" key={index}>{`Question ${index + 1} : ${question.question}`}</p>\r\n                                            <div className={`answer${index + 1}`}>\r\n                                                {question.allAnswers.map((answer, indexA) => {\r\n                                                    return (\r\n                                                        <button key={`${index}${indexA}`} onClick={(e) => this.onAnswerClicked(e, question, answer, index)}>\r\n                                                            {answer}</button>\r\n                                                    )\r\n                                                })}\r\n                                            </div>\r\n                                        </div>)\r\n                                })}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"nextButton\">\r\n                            <button className=\"nextPlayer\" onClick={this.handleNextPlayer}>Continue</button>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </section>\r\n            )\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return this.showQuestions();\r\n    }\r\n}\r\nexport default Playgame;","import \"./App.css\";\r\nimport React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport Header from \"./Header.js\";\r\nimport PlayerInformation from \"./playerInfo/PlayerInformation.js\";\r\nimport Playgame from \"./Playgame.js\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      questions: {},\r\n      players: [],\r\n      goToPlay: false\r\n    }\r\n  }\r\n\r\n  updatedPlayersInformation = (e, players) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      players: players\r\n    })\r\n  }\r\n\r\n  handleReset = (event) => {\r\n    event.preventDefault();\r\n    this.setState({\r\n      questions: {},\r\n      players: [],\r\n      goToPlay: false\r\n    })\r\n  }\r\n\r\n  getCategory = (e, players) => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      players: players,\r\n      goToPlay: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <div className=\"App\">\r\n\r\n          <Header />\r\n          {this.state.goToPlay ? <Redirect to=\"/play\" /> : null}\r\n\r\n          <Route exact path=\"/\">\r\n            <PlayerInformation\r\n              getCategory={this.getCategory} />\r\n          </Route>\r\n\r\n          <Route path=\"/play\" render={(props) => <Playgame players={this.state.players} reset={this.handleReset}/>} />\r\n          <Route render={() => <Redirect to={{ pathname: \"/\" }} />} />\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}